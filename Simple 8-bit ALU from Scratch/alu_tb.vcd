$date
	Mon Aug 05 20:38:48 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 16 ! out [15:0] $end
$var wire 8 " flag [7:0] $end
$var reg 1 # clk $end
$var reg 20 $ in [19:0] $end
$scope module alu1 $end
$var wire 1 # clk $end
$var wire 20 % in [19:0] $end
$var wire 8 & neg_input [7:0] $end
$var wire 16 ' mul_product [15:0] $end
$var wire 16 ( div_ans [15:0] $end
$var wire 8 ) adder_sum [7:0] $end
$var wire 1 * adder_sub_overflow $end
$var wire 1 + adder_sub_auxcarry $end
$var wire 1 , adder_overflow $end
$var wire 8 - adder_diff [7:0] $end
$var wire 1 . adder_cout $end
$var wire 1 / adder_borrow $end
$var wire 1 0 adder_auxcarry $end
$var reg 8 1 add_flags [7:0] $end
$var reg 16 2 add_out [15:0] $end
$var reg 8 3 and_flags [7:0] $end
$var reg 16 4 and_out [15:0] $end
$var reg 8 5 div_flags [7:0] $end
$var reg 16 6 div_out [15:0] $end
$var reg 8 7 flag [7:0] $end
$var reg 8 8 mul_flags [7:0] $end
$var reg 16 9 mul_out [15:0] $end
$var reg 8 : not_flags [7:0] $end
$var reg 16 ; not_out [15:0] $end
$var reg 8 < or_flags [7:0] $end
$var reg 16 = or_out [15:0] $end
$var reg 16 > out [15:0] $end
$var reg 8 ? sub_flags [7:0] $end
$var reg 16 @ sub_out [15:0] $end
$var reg 8 A xor_flags [7:0] $end
$var reg 16 B xor_out [15:0] $end
$scope module ad $end
$var wire 8 C A [7:0] $end
$var wire 8 D B [7:0] $end
$var wire 1 E Cin $end
$var wire 1 , Overflow $end
$var wire 8 F carry [7:0] $end
$var wire 8 G Sum [7:0] $end
$var wire 1 . Cout $end
$var wire 1 0 AuxCarry $end
$scope begin adder[0] $end
$var parameter 2 H i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 I A $end
$var wire 1 J B $end
$var wire 1 E Cin $end
$var wire 1 K Cout $end
$var wire 1 L Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[1] $end
$var parameter 2 M i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 N A $end
$var wire 1 O B $end
$var wire 1 P Cin $end
$var wire 1 Q Cout $end
$var wire 1 R Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[2] $end
$var parameter 3 S i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 T A $end
$var wire 1 U B $end
$var wire 1 V Cin $end
$var wire 1 W Cout $end
$var wire 1 X Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[3] $end
$var parameter 3 Y i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 Z A $end
$var wire 1 [ B $end
$var wire 1 \ Cin $end
$var wire 1 ] Cout $end
$var wire 1 ^ Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[4] $end
$var parameter 4 _ i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 ` A $end
$var wire 1 a B $end
$var wire 1 b Cin $end
$var wire 1 c Cout $end
$var wire 1 d Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[5] $end
$var parameter 4 e i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 f A $end
$var wire 1 g B $end
$var wire 1 h Cin $end
$var wire 1 i Cout $end
$var wire 1 j Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[6] $end
$var parameter 4 k i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 l A $end
$var wire 1 m B $end
$var wire 1 n Cin $end
$var wire 1 o Cout $end
$var wire 1 p Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[7] $end
$var parameter 4 q i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 r A $end
$var wire 1 s B $end
$var wire 1 t Cin $end
$var wire 1 u Cout $end
$var wire 1 v Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module div $end
$var wire 8 w dividend [7:0] $end
$var wire 8 x divisor [7:0] $end
$var reg 8 y quotient [7:0] $end
$var reg 8 z remainder [7:0] $end
$var reg 16 { result [15:0] $end
$var integer 32 | i [31:0] $end
$upscope $end
$scope module mul $end
$var wire 8 } A [7:0] $end
$var wire 8 ~ B [7:0] $end
$var wire 16 !" Product [15:0] $end
$upscope $end
$scope module sub $end
$var wire 8 "" A [7:0] $end
$var wire 8 #" B [7:0] $end
$var wire 1 $" Cin $end
$var wire 1 * Overflow $end
$var wire 8 %" carry [7:0] $end
$var wire 8 &" Sum [7:0] $end
$var wire 1 / Cout $end
$var wire 1 + AuxCarry $end
$scope begin adder[0] $end
$var parameter 2 '" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 (" A $end
$var wire 1 )" B $end
$var wire 1 $" Cin $end
$var wire 1 *" Cout $end
$var wire 1 +" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[1] $end
$var parameter 2 ," i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 -" A $end
$var wire 1 ." B $end
$var wire 1 /" Cin $end
$var wire 1 0" Cout $end
$var wire 1 1" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[2] $end
$var parameter 3 2" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 3" A $end
$var wire 1 4" B $end
$var wire 1 5" Cin $end
$var wire 1 6" Cout $end
$var wire 1 7" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[3] $end
$var parameter 3 8" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 9" A $end
$var wire 1 :" B $end
$var wire 1 ;" Cin $end
$var wire 1 <" Cout $end
$var wire 1 =" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[4] $end
$var parameter 4 >" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 ?" A $end
$var wire 1 @" B $end
$var wire 1 A" Cin $end
$var wire 1 B" Cout $end
$var wire 1 C" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[5] $end
$var parameter 4 D" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 E" A $end
$var wire 1 F" B $end
$var wire 1 G" Cin $end
$var wire 1 H" Cout $end
$var wire 1 I" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[6] $end
$var parameter 4 J" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 K" A $end
$var wire 1 L" B $end
$var wire 1 M" Cin $end
$var wire 1 N" Cout $end
$var wire 1 O" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder[7] $end
$var parameter 4 P" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 Q" A $end
$var wire 1 R" B $end
$var wire 1 S" Cin $end
$var wire 1 T" Cout $end
$var wire 1 U" Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 P"
b110 J"
b101 D"
b100 >"
b11 8"
b10 2"
b1 ,"
b0 '"
b111 q
b110 k
b101 e
b100 _
b11 Y
b10 S
b1 M
b0 H
$end
#0
$dumpvars
0U"
1T"
1S"
1R"
0Q"
0O"
1N"
1M"
1L"
0K"
0I"
1H"
1G"
0F"
1E"
0C"
1B"
0A"
1@"
1?"
0="
0<"
0;"
0:"
09"
17"
06"
15"
04"
03"
01"
10"
0/"
1."
1-"
1+"
0*"
1)"
0("
b101 &"
b11110010 %"
0$"
b11010011 #"
b110010 ""
b100011001010 !"
b101101 ~
b110010 }
b11111111111111111111111111111111 |
b100000101 {
b101 z
b1 y
b101101 x
b110010 w
0v
0u
0t
0s
0r
1p
0o
1n
0m
0l
0j
1i
0h
1g
1f
1d
0c
0b
0a
1`
1^
0]
0\
1[
0Z
1X
0W
0V
1U
0T
1R
0Q
0P
0O
1N
1L
0K
1J
0I
b1011111 G
b100000 F
0E
b101101 D
b110010 C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
b1100110111010010 ;
b0 :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
00
1/
0.
b101 -
0,
0+
0*
b1011111 )
b100000101 (
b100011001010 '
b11010011 &
b11001000101101 %
b11001000101101 $
0#
bx "
bx !
$end
#2000
b0 "
b0 7
b1100110111010010 !
b1100110111010010 >
1#
#4000
0#
#6000
1#
#8000
0#
#10000
1#
#12000
0#
#14000
1#
#16000
0#
#18000
1#
#20000
b10 1
b1011111 2
0#
b10011001000101101 $
b10011001000101101 %
#22000
b10 "
b10 7
b1011111 !
b1011111 >
1#
#24000
0#
#26000
1#
#28000
0#
#30000
1#
#32000
0#
#34000
1#
#36000
0#
#38000
1#
#40000
b11 ?
b101 @
0#
b100011001000101101 $
b100011001000101101 %
#42000
b11 "
b11 7
b101 !
b101 >
1#
#44000
0#
#46000
1#
#48000
0#
#50000
1#
#52000
0#
#54000
1#
#56000
0#
#58000
1#
#60000
b0 8
b100011001010 9
0#
b110011001000101101 $
b110011001000101101 %
#62000
b0 "
b0 7
b100011001010 !
b100011001010 >
1#
#64000
0#
#66000
1#
#68000
0#
#70000
1#
#72000
0#
#74000
1#
#76000
0#
#78000
1#
#80000
b0 5
b100000101 6
0#
b1000011001000101101 $
b1000011001000101101 %
#82000
b100000101 !
b100000101 >
1#
#84000
0#
#86000
1#
#88000
0#
#90000
1#
#92000
0#
#94000
1#
#96000
0#
#98000
1#
#100000
b0 3
b100000 4
0#
b1010011001000101101 $
b1010011001000101101 %
#102000
b100000 !
b100000 >
1#
#104000
0#
#106000
1#
#108000
0#
#110000
1#
#112000
0#
#114000
1#
#116000
0#
#118000
1#
#120000
b10 <
b111111 =
0#
b1100011001000101101 $
b1100011001000101101 %
#122000
b10 "
b10 7
b111111 !
b111111 >
1#
#124000
0#
#126000
1#
#128000
0#
#130000
1#
#132000
0#
#134000
1#
#136000
0#
#138000
1#
#140000
b0 A
b11111 B
0#
b1110011001000101101 $
b1110011001000101101 %
#142000
b0 "
b0 7
b11111 !
b11111 >
1#
#144000
0#
#146000
1#
#148000
0#
#150000
1#
#152000
0#
#154000
1#
#156000
0#
#158000
1#
#160000
0#
